// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

/*
  توجه: SQLite از enum پشتیبانی نمی‌کند.
  به‌جای enum Role، فیلد role را String با مقدار پیش‌فرض "USER" گذاشته‌ایم.
*/

model User {
  id            String         @id @default(cuid())
  username      String         @unique
  passwordHash  String
  displayName   String?
  role          String         @default("USER") // به‌جای enum
  branchId      String?
  branch        Branch?        @relation(fields: [branchId], references: [id])

  // روابط
  tickets       Ticket[]       @relation("UserTickets")
  ticketReads   TicketRead[]
  messagesAuthored Message[]   @relation("AuthorMessages")
  messageReads  MessageRead[]

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Branch {
  id        String     @id @default(cuid())
  code      String     @unique
  name      String

  // طرف مقابل روابط
  users     User[]
  tickets   Ticket[]
  messages  Message[]

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Ticket {
  id          String      @id @default(cuid())
  title       String
  content     String
  attachments String?     // در صورت نیاز بعداً می‌توان JSON کرد

  branchId    String?
  branch      Branch?     @relation(fields: [branchId], references: [id])

  userId      String?
  user        User?       @relation("UserTickets", fields: [userId], references: [id])

  reads       TicketRead[]

  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model TicketRead {
  id        String   @id @default(cuid())
  ticketId  String
  userId    String
  readAt    DateTime @default(now())

  ticket    Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([ticketId, userId])
}

model Message {
  id          String       @id @default(cuid())
  title       String
  body        String

  branchId    String?
  branch      Branch?      @relation(fields: [branchId], references: [id])

  authorId    String
  author      User         @relation("AuthorMessages", fields: [authorId], references: [id])

  pinned      Boolean      @default(false)
  createdAt   DateTime     @default(now())

  messageReads MessageRead[]
}

model MessageRead {
  id        String   @id @default(cuid())
  messageId String
  userId    String
  readAt    DateTime @default(now())

  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([messageId, userId])
}

// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// --- User & Branch & Ticket (مدل‌های قبلی‌ات را حفظ کرده‌ام/حداقلی)
model User {
  id        String   @id @default(cuid())
  username  String   @unique
  password  String
  role      Role     @default(USER)
  branchId  String?
  branch    Branch?  @relation(fields: [branchId], references: [id])

  // تیکت‌ها
  tickets   Ticket[]

  // خواندگی‌ها (تیکت)
  ticketReads TicketRead[]

  // خواندگی‌های پیام
  messageReads MessageRead[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  ADMIN
  USER
}

model Branch {
  id       String  @id @default(cuid())
  name     String
  code     String  @unique
  tickets  Ticket[]
}

model Ticket {
  id         String   @id @default(cuid())
  title      String
  body       String?
  priority   String?
  status     String   @default("OPEN")
  branchId   String?
  branch     Branch?  @relation(fields: [branchId], references: [id])
  authorId   String
  author     User     @relation(fields: [authorId], references: [id])
  // خواندگی‌ها
  reads      TicketRead[]

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model TicketRead {
  id        String   @id @default(cuid())
  ticketId  String
  userId    String
  readAt    DateTime @default(now())

  ticket    Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([ticketId, userId])
}

// --- پیام‌های بخشنامه‌ای
model Message {
  id        String   @id @default(cuid())
  title     String
  body      String
  // اگر true باشد، پیام برای همه‌ی شعب/کاربران است
  toAll     Boolean  @default(false)
  // اگر بخواهی برای یک شعبه خاص بفرستی (اختیاری)
  branchId  String?
  branch    Branch?  @relation(fields: [branchId], references: [id])

  reads     MessageRead[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MessageRead {
  id        String   @id @default(cuid())
  messageId String
  userId    String
  readAt    DateTime @default(now())

  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([messageId, userId])
}

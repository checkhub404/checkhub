generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String?
  role          String   @default("BRANCH") // "ADMIN" | "BRANCH" | "VIEWER"
  branchId      String?
  branch        Branch?  @relation(fields: [branchId], references: [id])
  passwordHash  String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  assignedTickets Ticket[]   @relation("TicketAssignee")
  createdTickets  Ticket[]   @relation("TicketCreatedBy")
  activities      Activity[] @relation("ActivityActor")

  // پیام‌ها
  createdMessages Message[]  @relation("MessageCreatedBy")
  messageReads    MessageRead[]
}

model Branch {
  id              String    @id @default(cuid())
  code            String    @unique
  name            String
  isActive        Boolean   @default(true)
  users           User[]
  students        Student[]
  cheques         Cheque[]
  ticketsAsSource Ticket[]  @relation("TicketSourceBranch")
  ticketsAsTarget Ticket[]  @relation("TicketTargetBranch")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // پیام‌های هدف‌گذاری‌شده به این شعبه
  messages        Message[] @relation("MessageTargetBranch")
}

model Student {
  id        String   @id @default(cuid())
  code      String   @unique
  fullName  String
  grade     String?
  guardian  String?
  phone     String?
  branchId  String
  branch    Branch   @relation(fields: [branchId], references: [id])
  cheques   Cheque[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cheque {
  id        String   @id @default(cuid())
  sayadiId  String?  @unique
  bank      String?
  accountNo String?
  amount    Int
  dueDate   DateTime
  status    String   @default("REGISTERED")
  imageUrl  String?
  studentId String
  student   Student  @relation(fields: [studentId], references: [id])
  branchId  String
  branch    Branch   @relation(fields: [branchId], references: [id])
  tickets   Ticket[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Ticket {
  id            String   @id @default(cuid())
  title         String
  description   String
  priority      String   @default("MEDIUM")
  status        String   @default("OPEN")
  chequeId      String
  cheque        Cheque   @relation(fields: [chequeId], references: [id])

  sourceBranchId String
  targetBranchId String
  sourceBranch   Branch   @relation("TicketSourceBranch", fields: [sourceBranchId], references: [id])
  targetBranch   Branch   @relation("TicketTargetBranch", fields: [targetBranchId], references: [id])

  assigneeId    String?
  assignee      User?     @relation("TicketAssignee", fields: [assigneeId], references: [id])

  activities    Activity[]
  attachments   Attachment[]

  createdById   String
  createdBy     User     @relation("TicketCreatedBy", fields: [createdById], references: [id])

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Attachment {
  id        String   @id @default(cuid())
  url       String
  fileName  String
  ticketId  String
  ticket    Ticket   @relation(fields: [ticketId], references: [id])
  createdAt DateTime @default(now())
}

model Activity {
  id        String   @id @default(cuid())
  ticketId  String
  ticket    Ticket   @relation(fields: [ticketId], references: [id])
  actorId   String
  actor     User     @relation("ActivityActor", fields: [actorId], references: [id])
  type      String
  note      String?
  createdAt DateTime @default(now())
}

model TicketRead {
  id        String   @id @default(cuid())
  ticketId  String
  userId    String
  readAt    DateTime @default(now())

  ticket    Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([ticketId, userId])
  @@index([ticketId])
  @@index([userId])
}

model Message {
  id             String   @id @default(cuid())
  title          String
  body           String
  isBroadcast    Boolean  @default(false)
  targetBranchId String?  // null یعنی سراسری
  targetBranch   Branch?  @relation("MessageTargetBranch", fields: [targetBranchId], references: [id])
  createdById    String
  createdBy      User     @relation("MessageCreatedBy", fields: [createdById], references: [id])
  createdAt      DateTime @default(now())

  reads          MessageRead[]

  @@index([targetBranchId])
  @@index([createdAt])
}

model MessageRead {
  id        String   @id @default(cuid())
  messageId String
  userId    String
  readAt    DateTime @default(now())

  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([messageId, userId])
  @@index([messageId])
  @@index([userId])
}
